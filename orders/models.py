from django.db import models
from datetime import datetime

# Create your models here.

class Allergen(models.Model):
    allergen_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)

    def __str__(self):
        return f"{self.name}, id={self.allergen_id}"

class Ingredient(models.Model):
    ingredient_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)
    origin = models.CharField(max_length=30)
    allergens = models.ManyToManyField(Allergen, null=True, blank=True)

    def __str__(self):
        return f"{self.name}, id={self.ingredient_id}"

class Section(models.Model): #TO BE COMPLETED
    section_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)
    #logo = models.ImageField

    def __str__(self):
        return f"{self.name}, id={self.section_id}"

class Plate(models.Model):  #TO BE COMPLETED
    plate_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)
    description = models.CharField(max_length=300)
    #image =
    section = models.ForeignKey(Section, on_delete=models.CASCADE)
    ingredients = models.ManyToManyField(Ingredient)

    def __str__(self):
        return f"{self.name}, id={self.plate_id}"


class Client(models.Model): #TO BE COMPLETED
    client_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=30)
    surname = models.CharField(max_length=30)
    email = models.EmailField()
    #phone = models.IntegerField()      PHONE-NUMBER-FIELD, THERE'S A PACKAGE
    id = models.CharField(max_length=10) #codice fiscale
    allergens = models.ManyToManyField(Allergen, null=True, blank=True)

    def __str__(self):
        return f"Client: {self.name} {self.surname}, id={self.client_id}"


class Restaurant(models.Model):
    restaurant_id = models.AutoField(primary_key=True)
    city = models.CharField(max_length=30)
    street = models.CharField(max_length=30)
    number = models.IntegerField() #18/A????
    cover_charge = models.DecimalField(decimal_places=2, max_digits=30) #coperto
    plates = models.ManyToManyField(Plate) #from here we will get all the sections the restaurant has, no need to have a "sections" field
    #is there a way i can store a map that has the plate as the key and a price connected to it? Having the same
    #price in every restaurant isn't optimal
    #I could make it in normal form using a new table with restaurant, plate, price with restaurant+plate as primary key

    def __str__(self):
        return f"Restaurant: {self.restaurant_id}"


class Order(models.Model):
    order_id = models.AutoField(primary_key=True)
    client = models.ForeignKey(Client, null=True, blank=True, on_delete=models.SET_NULL)
    name = models.CharField(max_length=30) #autofilled if he's a client with an account
    surname = models.CharField(max_length=30) #autofilled if he's a client with an account
    tip = models.DecimalField(decimal_places=2, max_digits=30)
    total = models.DecimalField(decimal_places=2, max_digits=30)  # autogenerated at the moment of creation
    plates = models.ManyToManyField(Plate)
    fullfilled = models.BooleanField(default=False)
    datetime = models.DateTimeField(default=datetime.now())
    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)

    def __str__(self):
        return f"Order: {self.order_id}, {self.restaurant}"